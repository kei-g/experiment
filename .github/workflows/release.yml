jobs:
  github:
    if: github.ref_type == 'tag'
    name: Create a release on GitHub
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Create a release
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo
            const { ref } = context
            if (!ref.match(/^refs\/tags\/v[0-9]+(\.[0-9]+)*(\-[0-9A-Za-z]+)*$/g))
              return core.setFailed(`inappropriate ref, ${ref}`)
            const version = ref.slice(11)
            const child_process = require('node:child_process')
            child_process.execSync(`git fetch --depth 1 origin +${ref}:${ref}`)
            child_process.exec(
              `git for-each-ref --format='%(contents)' ${ref}`,
              {},
              async (err, stdout, stderr) => {
                const i = stdout.search(/Signed\-off\-by\:\ /g)
                const message = i < 0 ? stdout : stdout.slice(0, i)
                const response = await github.request(
                  `POST /repos/${owner}/${repo}/releases`,
                  {
                    body: message,
                    draft: false,
                    name: `Version ${version}`,
                    owner,
                    prerelease: false,
                    repo,
                    tag_name: `v${version}`,
                    target_commitish: context.sha,
                  }
                )
                switch (response.status) {
                  case 201:
                    for (const key in response.data) {
                      const value = response.data[key]
                      if (typeof value === 'object')
                        continue
                      core.setOutput(key, value)
                    }
                    break
                  case 404:
                    core.setFailed('Not Found if the discussion category name is invalid')
                    break
                  case 422:
                    core.setFailed('Validation failed, or the endpoint has been spammed')
                    break
                  default:
                    core.setFailed(`Unknown error, ${response.status}`)
                    break
                }
              }
            )
  none:
    if: github.event_name == 'push' && github.ref_type == 'branch' && startsWith(github.event.head_commit.message, ':bookmark:\ Bump the version of @kei-g/none to ') == false
    name: Publish @kei-g/none
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          ref: ${{ github.event.ref }}
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          fingerprint: ${{ vars.GPG_PRIVATE_KEY_FINGERPRINT }}
          git_commit_gpgsign: true
          git_user_signingkey: true
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          cache: 'npm'
          node-version: 19
          registry-url: 'https://registry.npmjs.org'
      - id: version
        name: Bump the version
        run: |
          cd none
          current=$(jq -Mcr '.version' < package.json)
          echo from=$current | tee -a $GITHUB_OUTPUT
          version=$(npm version patch --no-git-tag-version)
          echo to=${version:1} | tee -a $GITHUB_OUTPUT
        shell: bash
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: commit
        name: Commit changes
        run: |
          version=${{ steps.version.outputs.to }}
          git config user.email ${{ github.event.pusher.email }}
          git config user.name ${{ github.event.pusher.name }}
          git add .
          branch=none-$version
          echo "branch=$branch" | tee -a $GITHUB_OUTPUT
          git checkout -b $branch
          message=":bookmark: Bump the version of @kei-g/none to $version"
          echo "message=$message" | tee -a $GITHUB_OUTPUT
          git commit \
              --author=. \
              --gpg-sign=${{ vars.GPG_PRIVATE_KEY_FINGERPRINT }} \
              --message "$message" \
              --signoff
          git push --set-upstream origin $branch
        shell: bash
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: create-pull-request
        name: Create a PR
        run: |
          body="This PR bumps the version of @kei-g/none from ${{ steps.version.outputs.from }} to ${{ steps.version.outputs.to }}"
          pull_request_url=$(
            gh pr create \
              --base main \
              --body "$body" \
              --reviewer $GITHUB_REPOSITORY_OWNER \
              --title "${{ steps.commit.outputs.message }}"
          )
          echo "PR_ID=${pull_request_url##*/}" | tee -a $GITHUB_OUTPUT
          echo "PR_URL=$pull_request_url" | tee -a $GITHUB_OUTPUT
        shell: bash
      - name: Wait a moment
        run: sleep 10
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_ID: ${{ steps.create-pull-request.outputs.PR_ID }}
        name: Approve the PR
        run: |
          gh pr review --approve $PR_ID
      - name: Wait a few seconds
        run: sleep 3
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_ID: ${{ steps.create-pull-request.outputs.PR_ID }}
          PR_URL: ${{ steps.create-pull-request.outputs.PR_URL }}
          branch: ${{ steps.commit.outputs.branch }}
        name: Auto merge
        run: |
          subject=":twisted_rightwards_arrows: Merge pull request #$PR_ID from $branch"
          gh pr merge --auto --merge --subject "$subject" "$PR_URL"
      - name: Wait a few seconds
        run: sleep 3
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.commit.outputs.branch }}
        name: Delete the branch
        run: |
          git push origin :$branch
      - env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        name: Publish @kei-g/none
        run: |
          cd none
          npm publish
  npm:
    if: github.ref_type == 'tag'
    name: Publish
    needs:
      - github
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          cache: 'npm'
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org'
      - name: Upgrade npm
        run: npm install npm@latest -g
      - name: Setup modules
        run: npm ci
      - env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        name: Publish
        run: npm publish
name: Release
on:
  create:
    branches-ignore:
      - '**'
    tags:
      - 'v[0-9]+(\.[0-9]+)*(\-[0-9A-Za-z]+)*'
  push:
    branches:
      - main
    paths:
      - 'none/**'
