env:
  fingerprint: ${{ vars.GPG_PRIVATE_KEY_FINGERPRINT }}
jobs:
  merge:
    if: github.actor == 'dependabot[bot]'
    name: Merge Dependabot PRs
    runs-on: ubuntu-latest
    steps:
      - name: Save the fingerprint, '${{ env.fingerprint }}'
        uses: actions/github-script@v6
        with:
          script: |
            const fingerprint = process.env['fingerprint']
            core.saveState('fingerprint', fingerprint)
      - id: dependabot-metadata
        name: Fetch Dependabot metadata
        uses: dependabot/fetch-metadata@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - if: startsWith(steps.dependabot-metadata.outputs.package-ecosystem, 'npm') && steps.dependabot-metadata.outputs.update-type == 'version-update:semver-patch'
        name: Checkout the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          ref: ${{ github.event.pull_request.head.ref }}
      - id: state
        if: startsWith(steps.dependabot-metadata.outputs.package-ecosystem, 'npm') && steps.dependabot-metadata.outputs.update-type == 'version-update:semver-patch'
        name: Restore the fingerprint
        uses: actions/github-script@v6
        with:
          script: |
            const fingerprint = core.getState('fingerprint')
            core.info(`fingerprint=${fingerprint}`)
            core.setOutput('fingerprint', fingerprint)
      - id: gpg
        if: startsWith(steps.dependabot-metadata.outputs.package-ecosystem, 'npm') && steps.dependabot-metadata.outputs.update-type == 'version-update:semver-patch'
        name: Import a GPG key
        uses: kei-g/experiment/.github/actions/import-gpg@main
        with:
          fingerprint: ${{ steps.state.outputs.fingerprint }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          secret-key: ${{ secrets.GPG_PRIVATE_KEY }}
      - if: startsWith(steps.dependabot-metadata.outputs.package-ecosystem, 'npm') && steps.dependabot-metadata.outputs.update-type == 'version-update:semver-patch'
        name: Update 'package.json'
        uses: actions/github-script@v6
        with:
          script: |
            core.startGroup('Assort dependencies')
            const { readFileSync } = require('node:fs')
            const package = JSON.parse(readFileSync('package.json'))
            const flags = {}
            for (const name of Object.keys(package.dependencies))
              flags[name] = '--save'
            for (const name of Object.keys(package.devDependencies))
              flags[name] = '-D'
            core.info(JSON.stringify(flags, undefined, 2))
            core.endGroup()
            core.startGroup('Update')
            const { execSync } = require('node:child_process')
            for (const dependency of ${{ steps.dependabot-metadata.outputs.updated-dependencies-json }})
              if (dependency.packageEcosystem.startsWith('npm')) {
                const flag = flags[dependency.dependencyName]
                if (!flag)
                  return core.setFailure(`${dependency.dependencyName} is included in neither 'dependencies' nor 'devDependencies'`)
                const command = `npm install ${dependency.dependencyName}@${dependency.newVersion} ${flag}`
                core.info(`executing ${command}`)
                execSync(command)
              }
            core.endGroup()
            core.startGroup('Commit and Push')
            execSync('git add .')
            const fingerprint = ${{ steps.gpg.outputs.fingerprint }}
            execSync(`git commit --allow-empty --gpg-sign=${fingerprint} --message=":arrow_up: Update 'package.json'" --signoff`)
            execSync('git push')
            core.endGroup()
      - name: Wait a few seconds
        uses: actions/github-script@v6
        with:
          script: |
            const msec = Math.floor(4000 + Math.random() * 6000)
            core.info(`Wait ${msec}(msec)`)
            await new Promise(
              resolve => setTimeout(resolve, msec)
            )
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          pull_request_url: ${{ github.event.pull_request.html_url }}
        if: startsWith(steps.dependabot-metadata.outputs.package-ecosystem, 'npm') && steps.dependabot-metadata.outputs.update-type == 'version-update:semver-patch'
        name: Merge Dependabot PRs
        run: |
          ref="${{ github.event.pull_request.head.ref }}"
          subject=":twisted_rightwards_arrows: Merge pull request #${pull_request_url##*/} from $ref"
          gh pr merge --auto --merge --subject "$subject" "$pull_request_url"
name: Dependabot auto-merge
on:
  pull_request_target:
    types:
      - opened
      - reopened
